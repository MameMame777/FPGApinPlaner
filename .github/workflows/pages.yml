name: Deploy to GitHub Pages

on:
  push:
    branches: [ master ]
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - name: 📦 Install dependencies
        run: npm ci
        
      - name: 🧪 Run tests
        run: npm run test:run
        
      - name: 🔍 Type check
        run: npm run type-check
        
      - name: 🏗️ Build
        run: npm run build
        
      - name: 📝 Create docs site
        run: |
          mkdir -p docs-site
          cp -r dist/* docs-site/
          
          # Create a simple index page with article
          cat > docs-site/article.html << 'EOF'
          <!DOCTYPE html>
          <html lang="ja">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>FPGA Pin Planner - AI駆動開発記事</title>
              <style>
                  body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
                  h1, h2, h3 { color: #333; }
                  code { background: #f4f4f4; padding: 2px 4px; border-radius: 4px; }
                  pre { background: #f4f4f4; padding: 15px; border-radius: 4px; overflow-x: auto; }
                  table { border-collapse: collapse; width: 100%; }
                  th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
                  th { background-color: #f2f2f2; }
              </style>
          </head>
          <body>
          EOF
          
          # Convert markdown to HTML (simple version)
          echo '<div id="article-content">' >> docs-site/article.html
          cat qiita-article.md | sed 's/^# /\<h1\>/g; s/^## /\<h2\>/g; s/^### /\<h3\>/g; s/$/\<\/br\>/g' >> docs-site/article.html
          echo '</div>' >> docs-site/article.html
          echo '</body></html>' >> docs-site/article.html
          
          # Update main index.html to include link to article
          if [ -f docs-site/index.html ]; then
            sed -i 's/<\/body>/<div style="position:fixed;top:10px;right:10px;"><a href="article.html" style="background:#007acc;color:white;padding:10px;text-decoration:none;border-radius:5px;">📖 開発記事<\/a><\/div><\/body>/g' docs-site/index.html
          fi
        
      - name: 🔧 Setup Pages
        uses: actions/configure-pages@v4
        with:
          enablement: true
          
      - name: 📤 Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs-site

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: 🚀 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        
      - name: 📊 Deployment Summary
        run: |
          echo "## 🎉 デプロイ完了!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **アプリURL**: ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **記事URL**: ${{ steps.deployment.outputs.page_url }}article.html" >> $GITHUB_STEP_SUMMARY
          echo "- **デプロイ時刻**: $(date)" >> $GITHUB_STEP_SUMMARY
