import * as vscode from 'vscode';
import { Pin } from '../views/PinListProvider';

export class ConstraintExporter {
    async exportXDC(pins: Pin[], uri: vscode.Uri): Promise<void> {
        const content = this.generateXDC(pins);
        await vscode.workspace.fs.writeFile(uri, Buffer.from(content, 'utf8'));
    }

    async exportSDC(pins: Pin[], uri: vscode.Uri): Promise<void> {
        const content = this.generateSDC(pins);
        await vscode.workspace.fs.writeFile(uri, Buffer.from(content, 'utf8'));
    }

    async exportQSF(pins: Pin[], uri: vscode.Uri): Promise<void> {
        const content = this.generateQSF(pins);
        await vscode.workspace.fs.writeFile(uri, Buffer.from(content, 'utf8'));
    }

    private generateXDC(pins: Pin[]): string {
        const lines: string[] = [];
        lines.push('# XDC Constraints File');
        lines.push('# Generated by FPGA Pin Planner');
        lines.push('');

        for (const pin of pins) {
            if (pin.number && pin.name) {
                lines.push(`# ${pin.comment || 'Pin assignment'}`);
                lines.push(`set_property PACKAGE_PIN ${pin.number} [get_ports ${pin.name}]`);
                
                if (pin.ioStandard) {
                    lines.push(`set_property IOSTANDARD ${pin.ioStandard} [get_ports ${pin.name}]`);
                }
                
                lines.push('');
            }
        }

        return lines.join('\n');
    }

    private generateSDC(pins: Pin[]): string {
        const lines: string[] = [];
        lines.push('# SDC Constraints File');
        lines.push('# Generated by FPGA Pin Planner');
        lines.push('');

        for (const pin of pins) {
            if (pin.number && pin.name) {
                lines.push(`# ${pin.comment || 'Pin assignment'}`);
                lines.push(`set_location_assignment PIN_${pin.number} -to ${pin.name}`);
                
                if (pin.ioStandard) {
                    lines.push(`set_instance_assignment -name IO_STANDARD "${pin.ioStandard}" -to ${pin.name}`);
                }
                
                lines.push('');
            }
        }

        return lines.join('\n');
    }

    private generateQSF(pins: Pin[]): string {
        const lines: string[] = [];
        lines.push('# QSF Assignments File');
        lines.push('# Generated by FPGA Pin Planner');
        lines.push('');

        for (const pin of pins) {
            if (pin.number && pin.name) {
                lines.push(`# ${pin.comment || 'Pin assignment'}`);
                lines.push(`set_location_assignment PIN_${pin.number} -to ${pin.name}`);
                
                if (pin.ioStandard) {
                    lines.push(`set_instance_assignment -name IO_STANDARD "${pin.ioStandard}" -to ${pin.name}`);
                }
                
                if (pin.voltage) {
                    lines.push(`set_instance_assignment -name IO_STANDARD "${pin.voltage}" -to ${pin.name}`);
                }
                
                lines.push('');
            }
        }

        return lines.join('\n');
    }
}
